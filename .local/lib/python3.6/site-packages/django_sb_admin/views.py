from django.views.generic import TemplateView,ListView
from django.shortcuts import render
from tez.models import yukDengeleyici, guvenlikDuvari
from django_sb_admin.forms import HomeForm
from django.contrib import messages
import os, subprocess, json, sys, re
import pexpect

file_path= "/etc/haproxy/haproxy.cfg"
def readFile(file):
        try:
            dosya = open(file, 'r')
            metin = dosya.read()
            dosya.close()
            return metin
        except FileNotFoundError:
            print("File does not exist: %s" % file)
            exit()

def listToString(s):
    str1 = ""
    for ele in s:
        str1 += ele
        return str1
    #listToStr = ' '.join([str(elem) for elem in s]) 

class HomeView(TemplateView):
    template_name = "django_sb_admin/melike.html"
    admin_page = "django_sb_admin/sb_admin_dashboard.html"

    def get(self, request):
        form = HomeForm()
        return render(request , self.template_name, { 'form' : form })
        
    def post(self,request):
        form = HomeForm(request.POST)
        if form.is_valid():
            text = form.cleaned_data['Kullanici']
            text_pass = form.cleaned_data['password']
            forms = HomeForm()
            args = {'form': form, 'text': text, 'text_pass': text_pass}
            if text == "melike" and text_pass == "1":
                return render(request , self.admin_page, args)
            else:
                text = "Kullanıcı veya Parola Yanlış !"
                args = {'form': form, 'text': text, 'text_pass': text_pass}
        return render(request , self.template_name, args)
  

def start(request):
    """Start page with a documentation.
    """
    return render(
        request,
        "django_sb_admin/start.html",
        {
            "nav_active": "start"
        }
    )

def login(request):
    """Start page with a documentation.
    """
    return render(
        request,
        "django_sb_admin/login.html"
    )

def dashboard(request):
    """Dashboard page.
    """
    return render(
        request,
        "django_sb_admin/sb_admin_dashboard.html",
        {
            "nav_active": "dashboard"
        }
    )

def charts(request):
    """Charts page.
    """
    return render(request, "django_sb_admin/sb_admin_charts.html",
                  {"nav_active":"charts"})

class yukView(TemplateView):
    
    #print(output)
    def get(self, request):
        print("get metodu")
        lines = yukDengeleyici.objects.all()
        print(lines)
        return render(request , "django_sb_admin/yuk_dengeleyici.html",{'lines' : lines })
    def post(self,request):
        if 'silme' in self.request.POST:
            print("silme butonu")
            lines = []
            yukDengeleyici.objects.all().delete()
            child = pexpect.spawn('sudo systemctl stop haproxy.service')
            child.expect('password')
            child.sendline('1')
            print(child.read())
        else:
            print("ekleme")
            #filepath = "/home/ubuntu/denemex/haproxy1.cfg"
            filepath = "/etc/haproxy/haproxy.cfg"
            algoritma_regex = "balance\s(\S+)"
            backendip_regex = "server test-222 (\S+)"
            backendip2_regex = "server test-223 (\S+)"
            port_regex = "bind\s\:(\d+)"
            output = readFile(filepath)
            algrtm = re.findall(algoritma_regex,output)
            bckndip = re.findall(backendip_regex,output)
            bckndip2 = re.findall(backendip2_regex,output)
            prt = re.findall(port_regex,output)
            ip_regex = "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
            Ip = request.POST.get("yukIP")
            Port = request.POST.get("yukPort")
            server1 = request.POST.get("serverIP")+":80"
            server2 = request.POST.get("serverIP2")+":80"
            Algoritma = request.POST.get("algoritma")
            if(re.search(ip_regex,Ip) and re.search(ip_regex,server1)):
                if(re.search(ip_regex,server2)):
                    label = listToString(algrtm)
                    label2 = listToString(bckndip)
                    label3 = listToString(prt)
                    label4 = listToString(bckndip2)

                    editprocess = os.popen(r"sed -Eri 's/\s*%s\s*$/%s/g' %s" % (label," "+Algoritma,filepath))
                    editprocess.close()
                    editprocess2 = os.popen(r"sed -Eri 's/\s*%s\s*$/%s/g' %s" % (label2," "+server1,filepath))
                    editprocess2.close()
                    editprocess3 = os.popen(r"sed -i 's/%s/%s/g' %s" % (label3,Port,filepath))
                    editprocess3.close()
                    editprocess4 = os.popen(r"sed -Eri 's/\s*%s\s*$/%s/g' %s" % (label4," "+server2,filepath))
                    editprocess4.close()
                    
                    list1 = yukDengeleyici(ip=Ip, port=Port, svr1=server1, svr2=server2, algoritma=Algoritma)  # create a ToDoList 
                    list1.save()
                    child = pexpect.spawn('sudo systemctl restart haproxy.service')
                    child.expect('password')
                    child.sendline('1')
                    print(child.read())
                    messages.success(request,'Kayıt gerçekleştirildi.')
                if(server2==""):
                    label = listToString(algrtm)
                    label2 = listToString(bckndip)
                    print("ddeneeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee")
                    messages.success(request,'Kayıt gerçekleştirildi.')
                elif not (re.search(ip_regex,server2)):
                    messages.error(request,'IP adresini doğru girdiğinizden emin olunuz!')
                print(yukDengeleyici.objects.all())
            else:
                messages.error(request,'IP adresini doğru girdiğinizden emin olunuz!')
            lines = yukDengeleyici.objects.all()
        return render(request, "django_sb_admin/yuk_dengeleyici.html",
                    {"lines":lines})


class guvenlikduvariView(TemplateView):
    def get(self, request):
        print("get metodu")
        lines = yukDengeleyici.objects.all()
        waf = guvenlikDuvari.objects.all()
        print(lines)
        return render(request, "django_sb_admin/webuygulamaguvenlikduvari.html",
                  {"lines":lines,"waf":waf})
    def post(self,request):
        if 'silme' in self.request.POST:
            print("silme butonu")
            lines = yukDengeleyici.objects.all()
            waf = []
            guvenlikDuvari.objects.all().delete()
            with open('/etc/nginx/naxsi.sert.rules',"r+") as f:
                f.truncate(0)
                f.write('SecRulesEnabled;\nDeniedUrl "/sert_Denied.html";\n')
            child = pexpect.spawn('sudo systemctl restart nginx.service')
            child.expect('password')
            child.sendline('1')
            print(child.read())

        else:
            liste = request.POST.getlist('saldiri')
            xssValue = False
            sqlValue = False
            traversalValue = False
            
            with open('/etc/nginx/naxsi.sert.rules',"a") as f:
                for i in liste:
                    f.write('CheckRule "$'+i+' >= 4" BLOCK;\n')
                    if(i == 'XSS'):
                        xssValue = True
                    if(i == 'SQL'):
                        sqlValue = True
                    if(i == 'TRAVERSAL'):
                        traversalValue = True

            list1 = guvenlikDuvari(isim="waf", xss=xssValue, sql=sqlValue,traversal=traversalValue)  # create a ToDoList 
            list1.save()
            lines = yukDengeleyici.objects.all()
            waf = guvenlikDuvari.objects.all()
            child = pexpect.spawn('sudo systemctl restart nginx.service')
            child.expect('password')
            child.sendline('1')
            print(child.read())

        return render(request, "django_sb_admin/webuygulamaguvenlikduvari.html",{"lines":lines,"waf":waf})
    
def access(request):
    with open('/var/log/sert_access.log') as f:
        content = f.read().splitlines()
    liste = []
    for line in content:
        try:
            fields = [x.strip() for x in line.split("|")]
            liste.append(fields)
            print(fields)
            #date, status, ip, request, user_agent, referer = fields
        except (ValueError, IndexError) as e:
            # Not good, print it!
            print("WARNING: parsing log failed", e)
            print(line)
            continue
    
    print("bitti")     
    return render(request, "django_sb_admin/access.html",
                  {"kelime":liste})
                  
def error(request):
    with open('/var/log/sert_error.log') as f:
        content = f.read().splitlines()
    liste = []
    pattern = r"^(\d+\/\d+\/\d+ \d+:\d+:\d+) (\[\S\S\S\S\S\]) (\S+) (\S+) (NAXSI_FMT:) (\S+), client: (\d+.\d+.\d+.\d),(.*)$"
    for line in content:
        match = re.search(r"^(\d+\/\d+\/\d+ \d+:\d+:\d+) (\[\S+]) (\d+\#\d\:) (\*\d+) (\S+) (\S+), client: (\d+.\d+.\d+.\d)(.*)$", line) # where line is a single line in the log    
        if match :

            date_time = match.group(1)
            print("selam : "+date_time)
            error_message = match.group(6)
            client_ip = match.group(7)
            yeni_liste = [date_time,error_message,client_ip]
            liste.append(yeni_liste)
            #date, status, ip, request, user_agent, referer = fields
        else:
            # Not good, print it!
            print("WARNING: parsing log failed")
            print(line)
            continue
    
    print("bitti")     
    return render(request, "django_sb_admin/error.html",
                  {"kelime":liste})  


class haproxyView(TemplateView):
    def get(self, request):
        print("get metodu")
        output = subprocess.getoutput("systemctl status haproxy.service -a")
        output2 = output.split("\n")
        print(output2)
        return render(request, "django_sb_admin/haproxy_servisi.html",
                    {"kelime":output})

    def post(self,request):
        if 'stopServis' in self.request.POST:
            print("stop")
            child = pexpect.spawn('sudo systemctl stop haproxy.service')
            child.expect('password')
            child.sendline('1')
            print(child.read())
            output = subprocess.getoutput("systemctl status haproxy.service -a")
        else:
            print("restart")
            child = pexpect.spawn('sudo systemctl restart haproxy.service')
            child.expect('password')
            child.sendline('1')
            print(child.read())
            output = subprocess.getoutput("systemctl status haproxy.service -a")
        return render(request, "django_sb_admin/haproxy_servisi.html",
                    {"kelime":output})

class nginxView(TemplateView):
    def get(self, request):
        print("get metodu")
        output = subprocess.getoutput("systemctl status nginx.service -a")
        output2 = output.split("\n")
        print(output2)
        return render(request, "django_sb_admin/nginx_servisi.html",
                    {"kelime":output})

    def post(self,request):
        if 'stopServis' in self.request.POST:
            print("stop")
            child = pexpect.spawn('sudo systemctl stop nginx.service')
            child.expect('password')
            child.sendline('1')
            print(child.read())
            output = subprocess.getoutput("systemctl status nginx.service -a")
        else:
            print("restart")
            child = pexpect.spawn('sudo systemctl restart nginx.service')
            child.expect('password')
            child.sendline('1')
            print(child.read())
            output = subprocess.getoutput("systemctl status nginx.service -a")
        return render(request, "django_sb_admin/nginx_servisi.html",
                    {"kelime":output})
                  
def naxsi_servisi(request):
    #output = subprocess.getoutput("tail /var/log/sert_error.log")
    #print(output)
    output = "naxsi servisi gelecek"
    return render(request, "django_sb_admin/naxsi_servisi.html",
                  {"kelime":output})  

def log(request):
    messages.error(request,'Kayıt gerçekleştirildi.')
    filepath = "/home/ubuntu/denemex/haproxy.cfg"
    algoritma_regex = "balance\s(\S+)"
    backendip_regex = "server\stest-222\s(\S+)(?=:)"
    #backendIpPort_regex = "server\stest-222\s(\S+)"
    port_regex = "bind\s:(\S+)"
    output = readFile(filepath)
    algrtm = re.findall(algoritma_regex,output)
    bckndip = re.findall(backendip_regex,output)
    prt = re.findall(port_regex,output)
    label = listToString(algrtm)
    print("".join(algrtm))
    newlabel = " xxxxxxxxxx"
    #writeprocess = os.popen("echo '%s' >> %s" % (label,filepath))
    editprocess = os.popen(r"sed -Eri 's/\s*%s\s*$/%s/g' %s" % (label,newlabel,filepath))
    editprocess.close()
    return render(request, "django_sb_admin/log.html",
                  {"kelime":output})

def tables(request):
    """Tables page.
    """
    return render(request, "django_sb_admin/sb_admin_tables.html",
                  {"nav_active":"tables"})
def forms(request):
    """Forms page.
    """
    return render(request, "django_sb_admin/sb_admin_forms.html",
                  {"nav_active":"forms"})
def bootstrap_elements(request):
    """Bootstrap elements page.
    """
    return render(request, "django_sb_admin/sb_admin_bootstrap_elements.html",
                  {"nav_active":"bootstrap_elements"})
def bootstrap_grid(request):
    """Bootstrap grid page.
    """
    return render(request, "django_sb_admin/sb_admin_bootstrap_grid.html",
                  {"nav_active":"bootstrap_grid"})
def dropdown(request):
    """Dropdown  page.
    """
    return render(request, "django_sb_admin/sb_admin_dropdown.html",
                  {"nav_active":"dropdown"})
def rtl_dashboard(request):
    """RTL Dashboard page.
    """
    return render(request, "django_sb_admin/sb_admin_rtl_dashboard.html",
                  {"nav_active":"rtl_dashboard"})

def blank(request):
    """Blank page.
    """
    print("asfadfsdgrdhd")
    return render(request, "django_sb_admin/sb_admin_blank.html",
                  {"nav_active":"blank"})

"""def webuygulamaguvenlikduvari(request):
    lines = yukDengeleyici.objects.all()
    print(lines)
    if(listToString(lines)==None):
        print("yük dengeleyici yoktur waf ekleyebilmek için yük dengeleyici ekleyebilmeniz gerekmektedir ")
    else:
        print("değil")
    print(request.POST.get("saldiri"))
    return render(request, "django_sb_admin/webuygulamaguvenlikduvari.html",
                  {"nav_active":"charts"})"""
            
